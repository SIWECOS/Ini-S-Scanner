{
  blacklists => {
    # Where to store the blacklists (directory!)
    storage  => '/storage/blacklists',
    # How often to update the blacklists (in seconds). Default is 24 hours (24*60*60)
    interval => 6 * 60 * 60,
    # Define how much to reduce from the optimal score
    # and set the criticality for each blacklist-kind when a hit was found.
    severity => {
      MALWARE => { 
        scoreType => 'critical',
        reduce => 100,
      },
      PHISHING => {
        scoreType => 'critical',
        reduce => 100,
      },
      BOTNET => {
        scoreType => 'critical',
        reduce => 100,
      },
      SPAM => {
        scoreType => 'warning',
        reduce => 50,
      },
    },
    lists => {
      # <id> => {      The id will be used to store the list in the filesystem.
      #   reference => Reference address to show to the customer
      #   kind      => What kind of blacklist (Just information) Phishing|Spam|Malware|â€¦
      #   url       => Address where to download from
      #   reader    => reader definition - everything is optional
      #                separator => qr// defining separators
      #                header => Which linenumber is the headerline. That many lines will be skipped
      #                          otherwise a qr// which will match the header line and store it in $1
      #                column => name or index of the column containing the data
      #                start => Line which indicates the start of the data. Line will be ignored
      #                comments => qr// to filter out comments
      #                cleaner => qr// to pick out (in $1) the data
      #                           or 'URI' to use URI to extract the host/domain
      #                TEXT::CSV => { init-attributes }
      #                          a CSV file can be parse using TEXT::CSV
      #                          The attributes known to Text::CSV can be used.
      #                          "separator" (see above) is ignored and has to be
      #                          set using Text::CSV's "sep" or "sep_char".
      # },
      'Phishtank' => {
        reference    => 'https://data.phishtank.com/',
        kind         => 'PHISHING',
        url          => 'http://data.phishtank.com/data/'.$ENV{PHISHTANK_API}.'/online-valid.csv',
        reader       =>  {
          'Text::CSV'=> {
            sep_char => ",",
            quote_char => '"',
            binary => 1,
          },
          header     => 1,
          column     => 'url',
          cleaner    => 'URI',
        },
      },
      'OpenPhish' => {
        reference    => 'https://openphish.com/',
        kind         => 'PHISHING',
        url          => 'https://openphish.com/feed.txt',
        reader       => {
          cleaner    => 'URI',
        },
      },
      'JoeWein' => {
        reference    => 'http://www.joewein.net/spam/blacklist.htm',
        kind         => 'SPAM',
        url          => 'https://www.joewein.net/dl/bl/dom-bl-base.txt',
        reader       => {
          cleaner    => qr<^(?:https?://)?(?:.*@)?([a-zA-Z0-9._-]+).*$>,
          comments   => qr/^.*(?:[<\t]|http:\x3b).*$/,   # Bug in the list
        },
      },
      'Bambenek-Consulting' => {
        reference    => 'http://osint.bambenekconsulting.com/feeds/',
        kind         => 'MALWARE',
        url          => 'http://osint.bambenekconsulting.com/feeds/dga-feed.txt',
        reader       => {
          comments   => qr<\s*\x23(?:.*)$>,
          separator  => qr<,>,
          column     => 1,
        },
      },
      'Malware-Domain-List' => {
        reference    => 'http://www.malwaredomainlist.com/mdl.php',
        kind         => 'MALWARE',
        url          => 'http://www.malwaredomainlist.com/hostslist/hosts.txt',
        reader       => {
          start      => qr<\blocalhost\b>,
          separator  => qr<\s+>,
          column     => 2,
        },
      },
      'Ransomware-Tracker' => {
        reference    => 'https://ransomwaretracker.abuse.ch/blocklist/',
        kind         => 'MALWARE',
        url          => 'https://ransomwaretracker.abuse.ch/downloads/RW_URLBL.txt',
        reader       => {
          comments   => qr<\s*\x23(?:.*)$>,
          cleaner    => 'URI',
        },
      },
      'Zeustracker-Abuse-ch' => {
        reference    => 'https://zeustracker.abuse.ch/blocklist.php',
        kind         => 'MALWARE',
        url          => 'https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist',
        reader       => {
          comments   => qr<\s*\x23(?:.*)$>,
        },
      },
      'Spamhaus-Domain-Blacklist' => {
        reference => 'https://www.spamhaus.org/dbl/',
        domain    => 'dbl.spamhaus.org.',
        kind      => {
                      127.0.1.2    => 'SPAM',
                      127.0.1.4    => 'PHISHING',
                      127.0.1.5    => 'MALWARE',
                      127.0.1.6    => 'BOTNET',
                      127.0.1.102  => 'SPAM',
                      127.0.1.103  => 'SPAM',
                      127.0.1.104  => 'PHISHING',
                      127.0.1.105  => 'MALWARE',
                      127.0.1.106  => 'BOTNET',
                    },
      },
      'Spamhaus-IP-Blacklist' => {
        reference => 'https://www.spamhaus.org/zen/',
        ip        => 'zen.spamhaus.org.',
        kind      => {
                      127.0.0.2    => 'SPAM',
                      127.0.0.3    => 'SPAM',
                      127.0.0.4    => 'MALWARE',
                      127.0.0.5    => 'MALWARE',
                      127.0.0.6    => 'MALWARE',
                      127.0.0.7    => 'MALWARE',
                    },
      },
    },
  },
  # Where to store the job queue
  minion => {
    storage => '/storage/jobs.sqlite',
  },
  # Configuration for the webserver
  # Check https://mojolicious.org/perldoc/Mojo/Server/Hypnotoad
  # for all options
  hypnotoad => {
    listen  => ['http://*:8080'],
    workers => 10
  },
}
